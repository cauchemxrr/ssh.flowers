import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import Router
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "8395025224:AAFbApm2m28qAqKXwIRL2Sgj36dcLddgyn4"  # –í–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 5315749575  # –í–∞—à Telegram ID
WEBAPP_URL = "https://cauchemxrr.github.io/ssh.flowers/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

@router.message(Command("start"))
async def start(msg: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üå∏ –û—Ç–∫—Ä—ã—Ç—å ssh.flowers",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    await msg.answer(
        "üíê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ssh.flowers!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=kb
    )

@router.message(lambda msg: msg.web_app_data is not None)
async def handle_webapp_data(msg: types.Message):
    try:
        data = msg.web_app_data.data
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App: {data}")
        
        try:
            order_data = json.loads(data)
        except json.JSONDecodeError:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if order_data.get('type') == 'bouquet_order':
            await handle_order(msg, order_data)
        elif order_data.get('type') == 'contact':
            await handle_contact(msg, order_data)
        elif order_data.get('type') == 'custom_bouquet_request':
            await handle_custom_bouquet_request(msg, order_data)
        else:
            await handle_general_data(msg, order_data)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini App: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

async def handle_order(msg: types.Message, order_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –±—É–∫–µ—Ç–æ–≤"""
    try:
        user = order_data.get('user', {})
        name = order_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        price = order_data.get('price', 0)
        category = order_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timestamp = order_data.get('timestamp', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        order_text = f"üÜï **–ó–ê–ö–ê–ó –ì–û–¢–û–í–û–ì–û –ë–£–ö–ï–¢–ê –ò–ó ssh.flowers!**\n\n"
        order_text += f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        order_text += f"üÜî **ID:** {user.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        order_text += f"üìÖ **–î–∞—Ç–∞:** {timestamp}\n"
        order_text += f"üíê **–ë—É–∫–µ—Ç:** {name}\n"
        order_text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n"
        order_text += f"üí∞ **–¶–µ–Ω–∞:** {price} ‚ÇΩ\n\n"
        order_text += f"üí¨ **–û—Ç–≤–µ—Ç–∏—Ç—å:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, order_text, parse_mode="Markdown")
        logging.info(f"–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É: {order_data}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer(
            "‚úÖ **–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üíê **–ë—É–∫–µ—Ç:** {name}\n"
            f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n"
            f"üí∞ **–¶–µ–Ω–∞:** {price} ‚ÇΩ\n\n"
            "üìû **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
            "‚Ä¢ –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "‚Ä¢ –°–æ–≥–ª–∞—Å—É–µ—Ç –≤—Ä–µ–º—è –∏ –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n"
            "‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 21:00\n"
            "üì± **–°–≤—è–∑—å:** @sshflowersbot\n\n"
            "üå∏ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä ssh.flowers!**",
            parse_mode="Markdown"
        )
        logging.info(f"–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_custom_bouquet_request(msg: types.Message, request_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞"""
    try:
        user = request_data.get('user', {})
        count = request_data.get('count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        flowers = request_data.get('flowers', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        package = request_data.get('package', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        card = request_data.get('card', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        wishes = request_data.get('wishes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timestamp = request_data.get('timestamp', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        request_text = f"üé® **–ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –ë–£–ö–ï–¢–ê –ò–ó ssh.flowers!**\n\n"
        request_text += f"üë§ **–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        request_text += f"üÜî **ID:** {user.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        request_text += f"üìÖ **–î–∞—Ç–∞:** {timestamp}\n\n"
        request_text += "üå∫ **–î–µ—Ç–∞–ª–∏ –±—É–∫–µ—Ç–∞:**\n"
        request_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {count}\n"
        request_text += f"‚Ä¢ –í–∏–¥—ã —Ü–≤–µ—Ç–æ–≤: {flowers}\n"
        request_text += f"‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞: {package}\n"

        if card and card.lower() != '–Ω–µ—Ç':
            request_text += f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∫–∞: {card}\n"

        if wishes:
            request_text += f"‚Ä¢ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {wishes}\n"

        request_text += f"\nüí¨ **–û—Ç–≤–µ—Ç–∏—Ç—å:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, request_text, parse_mode="Markdown")
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É: {request_data}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer(
            "‚úÖ **–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n"
            "üé® –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±—É–∫–µ—Ç–∞\n"
            "üìû –ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n"
            "üí∞ –ò —Å–æ–æ–±—â–∏—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
            "‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00 - 21:00\n"
            "üì± **–°–≤—è–∑—å:** @sshflowersbot\n\n"
            "üå∏ **–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä ssh.flowers!**",
            parse_mode="Markdown"
        )
        logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_contact(msg: types.Message, contact_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–≤—è–∑–∏"""
    try:
        user = contact_data.get('user', {})
        message = contact_data.get('message', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        contact_text = f"üí¨ **–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–ó ssh.flowers**\n\n"
        contact_text += f"üë§ **–û—Ç:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        contact_text += f"üÜî **ID:** {user.get('id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        contact_text += f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message}\n\n"
        contact_text += f"üí¨ **–û—Ç–≤–µ—Ç–∏—Ç—å:** @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, contact_text, parse_mode="Markdown")
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: {contact_data}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer(
            "‚úÖ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            "üìß –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown"
        )
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_general_data(msg: types.Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user = data.get('user', {})
        logging.info(f"–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('id')}: {data}")
        await msg.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)

async def main():
    try:
        print("üöÄ –ë–æ—Ç ssh.flowers –∑–∞–ø—É—â–µ–Ω!")
        print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
        print(f"üåê Mini App URL: {WEBAPP_URL}")
        print("üì± –û–∂–∏–¥–∞—é –∑–∞–∫–∞–∑—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
