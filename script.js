// Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let tg = window.Telegram.WebApp;
let bouquetsDatabase = {
    love: [],      // –õ—é–±–∏–º–æ–π
    impress: [],   // –ö–æ–∑—ã—Ä–Ω—É—Ç—å
    sorry: [],     // –û–±–ª–∞–∂–∞–ª—Å—è
    march8: [],    // 8 –º–∞—Ä—Ç–∞
    birthday: [],  // –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
    any: []        // –ù–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    tg.ready();
    tg.expand();
    
    // –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å (–≤–∞—à Telegram ID)
    if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id === 5315749575) {
        document.getElementById('admin-panel').style.display = 'block';
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadBouquetsFromStorage();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners();
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    displayUserInfo();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    document.querySelectorAll('.category-card').forEach(card => {
        card.addEventListener('click', function() {
            const category = this.dataset.category;
            showCategoryBouquets(category);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –±—É–∫–µ—Ç–∞
    document.getElementById('bouquet-form').addEventListener('submit', function(e) {
        e.preventDefault();
        sendCustomBouquetRequest();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã —Å–≤—è–∑–∏
    document.getElementById('contact-form').addEventListener('submit', function(e) {
        e.preventDefault();
        sendContactMessage();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞
    document.getElementById('add-bouquet-form').addEventListener('submit', function(e) {
        e.preventDefault();
        addNewBouquet();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    setupModalHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    setupFileUpload();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
function setupFileUpload() {
    const fileInput = document.getElementById('bouquet-image');
    const fileLabel = document.querySelector('.file-upload-label');
    
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            const imageUrl = URL.createObjectURL(file);
            fileLabel.innerHTML = `üì∑ ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
            fileLabel.style.borderColor = 'var(--accent-color)';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ localStorage –∫–∞–∫ base64 (–¥–ª—è –¥–µ–º–æ)
            const reader = new FileReader();
            reader.onload = function(e) {
                const base64 = e.target.result;
                fileInput.dataset.base64 = base64;
            };
            reader.readAsDataURL(file);
        }
    });
    
    // Drag and drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    fileLabel.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.classList.add('dragover');
    });
    
    fileLabel.addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
    });
    
    fileLabel.addEventListener('drop', function(e) {
        e.preventDefault();
        this.classList.remove('dragover');
        
        const file = e.dataTransfer.files[0];
        if (file && file.type.startsWith('image/')) {
            fileInput.files = e.dataTransfer.files;
            const event = new Event('change');
            fileInput.dispatchEvent(event);
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function displayUserInfo() {
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        const user = tg.initDataUnsafe.user;
        const userName = user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const userAvatar = user.photo_url || 'üë§';
        
        document.getElementById('user-name').textContent = userName;
        
        if (user.photo_url) {
            document.getElementById('user-avatar').innerHTML = `<img src="${user.photo_url}" alt="–ê–≤–∞—Ç–∞—Ä" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function showCategoryBouquets(category) {
    const modal = document.getElementById('category-modal');
    const categoryTitle = document.getElementById('category-title');
    const bouquetsContainer = document.getElementById('bouquets-in-category');
    
    const categoryNames = {
        love: 'üåπ –õ—é–±–∏–º–æ–π',
        impress: '‚ú® –ö–æ–∑—ã—Ä–Ω—É—Ç—å',
        sorry: 'ü•∫ –û–±–ª–∞–∂–∞–ª—Å—è',
        march8: 'üå∑ 8 –º–∞—Ä—Ç–∞',
        birthday: 'üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        any: 'üéÅ –ù–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π'
    };
    
    categoryTitle.textContent = categoryNames[category] || 'üíê –ö–∞—Ç–µ–≥–æ—Ä–∏—è';
    
    const bouquets = bouquetsDatabase[category] || [];
    
    if (bouquets.length === 0) {
        bouquetsContainer.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üå∫</div>
                <h3>–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ</h3>
                <p>–ù–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –∫—Ä–∞—Å–∏–≤—ã–µ –±—É–∫–µ—Ç—ã!<br>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.</p>
            </div>
        `;
    } else {
        bouquetsContainer.innerHTML = `
            <div class="bouquets-in-category">
                ${bouquets.map(bouquet => `
                    <div class="bouquet-item">
                        <div class="bouquet-image">
                            ${bouquet.image ? `<img src="${bouquet.image}" alt="${bouquet.name}">` : 'üå∫'}
                        </div>
                        <h4>${bouquet.name}</h4>
                        <p>${bouquet.description}</p>
                        <div class="bouquet-price">${bouquet.price.toLocaleString()} ‚ÇΩ</div>
                        <button class="btn-primary" onclick="orderBouquet('${bouquet.name}', ${bouquet.price}, '${categoryNames[category]}')">–ó–∞–∫–∞–∑–∞—Ç—å</button>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    modal.style.display = 'block';
}

// –ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –±—É–∫–µ—Ç
function orderBouquet(name, price, category) {
    const user = tg.initDataUnsafe?.user || {};
    
    const orderData = {
        type: 'bouquet_order',
        user: {
            id: user.id || '–ù–µ —É–∫–∞–∑–∞–Ω',
            username: user.username || '–ù–µ —É–∫–∞–∑–∞–Ω',
            first_name: user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω'
        },
        name: name,
        price: price,
        category: category,
        timestamp: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
    tg.sendData(JSON.stringify(orderData));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    tg.showAlert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('category-modal').style.display = 'none';
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞
function sendCustomBouquetRequest() {
    const form = document.getElementById('bouquet-form');
    const formData = new FormData(form);
    
    const user = tg.initDataUnsafe?.user || {};
    
    const requestData = {
        type: 'custom_bouquet_request',
        user: {
            id: user.id || '–ù–µ —É–∫–∞–∑–∞–Ω',
            username: user.username || '–ù–µ —É–∫–∞–∑–∞–Ω',
            first_name: user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω'
        },
        count: formData.get('flower-count'),
        flowers: formData.get('flower-types'),
        package: formData.get('package'),
        card: formData.get('card') || '–ù–µ—Ç',
        wishes: formData.get('wishes') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        timestamp: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
    tg.sendData(JSON.stringify(requestData));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    tg.showAlert('‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ü–µ–Ω—ã.');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–≤—è–∑–∏
function sendContactMessage() {
    const form = document.getElementById('contact-form');
    const formData = new FormData(form);
    
    const user = tg.initDataUnsafe?.user || {};
    
    const contactData = {
        type: 'contact',
        user: {
            id: user.id || '–ù–µ —É–∫–∞–∑–∞–Ω',
            username: user.username || '–ù–µ —É–∫–∞–∑–∞–Ω',
            first_name: user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω'
        },
        message: formData.get('contact-message'),
        timestamp: new Date().toISOString()
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
    tg.sendData(JSON.stringify(contactData));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    tg.showAlert('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
}

// –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
function manageBouquets() {
    const modal = document.getElementById('manage-bouquets-modal');
    modal.style.display = 'block';
    showExistingBouquets();
}

function showExistingBouquets() {
    const container = document.getElementById('existing-bouquets');
    let allBouquets = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–µ—Ç—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    Object.keys(bouquetsDatabase).forEach(category => {
        bouquetsDatabase[category].forEach(bouquet => {
            allBouquets.push({...bouquet, category: category});
        });
    });
    
    if (allBouquets.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤</p>';
        return;
    }
    
    const categoryNames = {
        love: 'üåπ –õ—é–±–∏–º–æ–π',
        impress: '‚ú® –ö–æ–∑—ã—Ä–Ω—É—Ç—å',
        sorry: 'ü•∫ –û–±–ª–∞–∂–∞–ª—Å—è',
        march8: 'üå∑ 8 –º–∞—Ä—Ç–∞',
        birthday: 'üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        any: 'üéÅ –ù–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π'
    };
    
    container.innerHTML = allBouquets.map(bouquet => `
        <div class="bouquet-item" style="margin-bottom: 20px; padding: 20px; border: 1px solid var(--border-color); border-radius: var(--radius-sm);">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h4 style="margin: 0;">${bouquet.name}</h4>
                <button class="admin-btn" onclick="deleteBouquet('${bouquet.id}', '${bouquet.category}')" style="padding: 8px 16px; font-size: 14px; background: #dc3545;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
            <p style="margin-bottom: 10px; color: var(--text-secondary);">${bouquet.description}</p>
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span style="color: var(--accent-color); font-weight: 700;">${bouquet.price.toLocaleString()} ‚ÇΩ</span>
                <span style="color: var(--text-muted); font-size: 14px;">${categoryNames[bouquet.category]}</span>
            </div>
        </div>
    `).join('');
}

function addNewBouquet() {
    const category = document.getElementById('bouquet-category').value;
    const name = document.getElementById('bouquet-name').value;
    const description = document.getElementById('bouquet-description').value;
    const price = parseInt(document.getElementById('bouquet-price').value);
    const imageInput = document.getElementById('bouquet-image');
    
    if (!category || !name || !description || !price) {
        tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!');
        return;
    }
    
    const newBouquet = {
        id: Date.now(),
        name: name,
        description: description,
        price: price,
        image: imageInput.dataset.base64 || null
    };
    
    if (!bouquetsDatabase[category]) {
        bouquetsDatabase[category] = [];
    }
    bouquetsDatabase[category].push(newBouquet);
    
    saveBouquetsToStorage();
    document.getElementById('add-bouquet-form').reset();
    document.querySelector('.file-upload-label').innerHTML = 'üì∑ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫';
    document.querySelector('.file-upload-label').style.borderColor = 'var(--border-color)';
    showExistingBouquets();
    tg.showAlert('‚úÖ –ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
}

function deleteBouquet(id, category) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç?')) {
        bouquetsDatabase[category] = bouquetsDatabase[category].filter(bouquet => bouquet.id !== parseInt(id));
        saveBouquetsToStorage();
        showExistingBouquets();
        tg.showAlert('‚úÖ –ë—É–∫–µ—Ç —É–¥–∞–ª–µ–Ω!');
    }
}

function viewOrders() {
    tg.showAlert('üì¶ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
}

function manageCategories() {
    const modal = document.getElementById('manage-categories-modal');
    modal.style.display = 'block';
    
    const container = document.getElementById('categories-list');
    const categoryNames = {
        love: 'üåπ –õ—é–±–∏–º–æ–π',
        impress: '‚ú® –ö–æ–∑—ã—Ä–Ω—É—Ç—å',
        sorry: 'ü•∫ –û–±–ª–∞–∂–∞–ª—Å—è',
        march8: 'üå∑ 8 –º–∞—Ä—Ç–∞',
        birthday: 'üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
        any: 'üéÅ –ù–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π'
    };
    
    container.innerHTML = Object.keys(categoryNames).map(category => {
        const count = bouquetsDatabase[category] ? bouquetsDatabase[category].length : 0;
        return `
            <div style="padding: 20px; border: 1px solid var(--border-color); border-radius: var(--radius-sm); margin-bottom: 15px;">
                <h3 style="margin-bottom: 10px;">${categoryNames[category]}</h3>
                <p style="color: var(--text-secondary); margin-bottom: 15px;">–ë—É–∫–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${count}</p>
                <button class="admin-btn" onclick="showCategoryBouquets('${category}')" style="width: 100%;">üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
            </div>
        `;
    }).join('');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function setupModalHandlers() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    document.querySelectorAll('.close').forEach(closeBtn => {
        closeBtn.addEventListener('click', function() {
            this.closest('.modal').style.display = 'none';
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function saveBouquetsToStorage() {
    localStorage.setItem('sshFlowersBouquets', JSON.stringify(bouquetsDatabase));
}

function loadBouquetsFromStorage() {
    const saved = localStorage.getItem('sshFlowersBouquets');
    if (saved) {
        try {
            bouquetsDatabase = JSON.parse(saved);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
tg.MainButton.onClick(function() {
    tg.MainButton.hide();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
tg.BackButton.onClick(function() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
    tg.showAlert(message);
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function animateElement(element, delay = 0) {
    element.style.opacity = '0';
    element.style.transform = 'translateY(20px)';
    
    setTimeout(() => {
        element.style.transition = 'all 0.6s ease-out';
        element.style.opacity = '1';
        element.style.transform = 'translateY(0)';
    }, delay);
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ —Å–µ–∫—Ü–∏—è–º
document.addEventListener('DOMContentLoaded', function() {
    const sections = document.querySelectorAll('section');
    sections.forEach((section, index) => {
        animateElement(section, index * 100);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:', e.error);
    tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', function(e) {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
    tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
});

