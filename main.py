import logging
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
API_TOKEN = "8395025224:AAFbApm2m28qAqKXwIRL2Sgj36dcLddgyn4"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 5315749575  # –¢–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)

# ===== –ë–î =====
conn = sqlite3.connect("flowers.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    avatar TEXT,
    orders TEXT
)""")
conn.commit()

# ===== –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò =====
default_categories = ["üåπ –õ—é–±–∏–º–æ–π", "üé© –ö–æ–∑—ã—Ä–Ω—É—Ç—å", "üòÖ –û–±–ª–∞–∂–∞–ª—Å—è –ø–æ –∫—Ä—É–ø–Ω–æ–º—É",
                      "üå∏ 8 –º–∞—Ä—Ç–∞", "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "üíê –ù–∞ –ª—é–±–æ–π —Å–ª—É—á–∞–π"]
for cat in default_categories:
    cursor.execute("INSERT OR IGNORE INTO categories (name) VALUES (?)", (cat,))
conn.commit()

# ===== FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—É–∫–µ—Ç–∞ =====
class BouquetForm(StatesGroup):
    count = State()
    flowers = State()
    package = State()
    card = State()
    wishes = State()

# ===== FSM –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º =====
class ContactForm(StatesGroup):
    message = State()

# ===== –ë–û–¢ =====
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ===== –ú–ï–ù–Æ =====
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    kb.add(KeyboardButton("üíå –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton("üé® –°–æ–∑–¥–∞—Ç—å –±—É–∫–µ—Ç"))
    return kb

# ===== –°–¢–ê–†–¢ =====
@dp.message_handler(commands=['st   art'])
async def start(msg: types.Message):
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
        avatar_url = ""
        try:
            photos = msg.from_user.get_profile_photos()
            if photos.total_count > 0:
                avatar_url = photos.photos[0][-1].file_id
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: {e}")
        
        cursor.execute("INSERT OR IGNORE INTO users (id, username, avatar, orders) VALUES (?, ?, ?, ?)",
                       (msg.from_user.id, msg.from_user.username, avatar_url, ""))
        conn.commit()
        await msg.answer("üíê –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –±—É–∫–µ—Ç–æ–≤.\n–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π –±—É–∫–µ—Ç.",
                         reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò =====
@dp.message_handler(lambda msg: msg.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(msg: types.Message):
    try:
        cursor.execute("SELECT name FROM categories")
        cats = cursor.fetchall()
        kb = InlineKeyboardMarkup()
        for c in cats:
            kb.add(InlineKeyboardButton(c[0], callback_data=f"cat_{c[0]}"))
        await msg.answer("üå∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

# ===== –ö–û–ù–°–¢–†–£–ö–¢–û–† –ë–£–ö–ï–¢–ê =====
@dp.message_handler(lambda msg: msg.text == "üé® –°–æ–∑–¥–∞—Ç—å –±—É–∫–µ—Ç")
async def create_bouquet(msg: types.Message):
    await msg.answer("–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ —Ö–æ—Ç–∏—Ç–µ –≤ –±—É–∫–µ—Ç–µ?")
    await BouquetForm.count.set()

@dp.message_handler(state=BouquetForm.count)
async def set_count(msg: types.Message, state: FSMContext):
    await state.update_data(count=msg.text)
    await msg.answer("–ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
    await BouquetForm.flowers.set()

@dp.message_handler(state=BouquetForm.flowers)
async def set_flowers(msg: types.Message, state: FSMContext):
    await state.update_data(flowers=msg.text)
    await msg.answer("–ö–∞–∫—É—é —É–ø–∞–∫–æ–≤–∫—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?")
    await BouquetForm.package.set()

@dp.message_handler(state=BouquetForm.package)
async def set_package(msg: types.Message, state: FSMContext):
    await state.update_data(package=msg.text)
    await msg.answer("–ù—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞? –ï—Å–ª–∏ –¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
    await BouquetForm.card.set()

@dp.message_handler(state=BouquetForm.card)
async def set_card(msg: types.Message, state: FSMContext):
    await state.update_data(card=msg.text)
    await msg.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?")
    await BouquetForm.wishes.set()

@dp.message_handler(state=BouquetForm.wishes)
async def finish_bouquet(msg: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        await state.finish()

        text = (f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –±—É–∫–µ—Ç–∞:\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {data['count']}\n"
                f"–¶–≤–µ—Ç—ã: {data['flowers']}\n"
                f"–£–ø–∞–∫–æ–≤–∫–∞: {data['package']}\n"
                f"–û—Ç–∫—Ä—ã—Ç–∫–∞: {data['card']}\n"
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {data['wishes']}\n"
                f"–û—Ç: @{msg.from_user.username} ({msg.from_user.id})")
        await bot.send_message(ADMIN_ID, text)
        await msg.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ finish_bouquet: {e}")
        await state.finish()
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())

# ===== –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ê–î–ú–ò–ù–û–ú =====
@dp.message_handler(lambda msg: msg.text == "üíå –°–≤—è–∑–∞—Ç—å—Å—è")
async def contact_admin(msg: types.Message):
    await msg.answer("‚úâ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:")
    await ContactForm.message.set()

@dp.message_handler(state=ContactForm.message)
async def forward_message(msg: types.Message, state: FSMContext):
    try:
        await bot.send_message(ADMIN_ID, f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{msg.from_user.username} ({msg.from_user.id}):\n{msg.text}")
        await state.finish()
        await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ forward_message: {e}")
        await state.finish()
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=main_menu())

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
